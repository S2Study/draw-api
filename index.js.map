{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";AA04CC","sourcesContent":["export namespace APIS {\n\texport namespace editor {\n\t\texport interface Color {\n\t\t\tr: number;\n\t\t\tg: number;\n\t\t\tb: number;\n\t\t}\n\t\texport interface DrawEditorProperties {\n\n\t\t\t/**\n\t\t\t * 線の色\n\t\t\t */\n\t\t\tcolor: Color;\n\n\t\t\t/**\n\t\t\t * 線の太さ\n\t\t\t */\n\t\t\tthickness: number;\n\n\t\t\t/**\n\t\t\t * フォントサイズ\n\t\t\t */\n\t\t\tfontSize: number;\n\n\t\t\t/**\n\t\t\t * フォントファミリー\n\t\t\t */\n\t\t\tfontFamily: string;\n\n\t\t\t/**\n\t\t\t * フォントの太さ\n\t\t\t */\n\t\t\tfontWeight: number;\n\n\t\t\t/**\n\t\t\t * フォントスタイル\n\t\t\t */\n\t\t\tfontStyle: string;\n\n\t\t\t/**\n\t\t\t * アルファ値\n\t\t\t */\n\t\t\talpha: number;\n\n\t\t\t/**\n\t\t\t * パスの種別\n\t\t\t * 0: moveTo\n\t\t\t * 1: arcTo\n\t\t\t * 2: quadraticCurveTo\n\t\t\t * 3: lineTo\n\t\t\t * 4: bezierCurveTo\n\t\t\t */\n\t\t\tpathType: number;\n\t\t}\n\n\t\texport interface DrawEditorModeChanger {\n\n\t\t\t/**\n\t\t\t * モードチェンジ中\n\t\t\t */\n\t\t\tCHANGING: number;\n\n\t\t\t/**\n\t\t\t * 消しゴムツールを示す定数\n\t\t\t */\n\t\t\tERASER_MODE: number;\n\n\t\t\t/**\n\t\t\t * 塗りツールを示す定数\n\t\t\t */\n\t\t\tFILL_MODE: number;\n\n\t\t\t/**\n\t\t\t * 線ツールを示す定数\n\t\t\t */\n\t\t\tSTROKE_MODE: number;\n\n\t\t\t/**\n\t\t\t * クリップツールを示す定数\n\t\t\t */\n\t\t\tCLIP_MODE: number;\n\n\t\t\t/**\n\t\t\t * テキストツールを示す定数\n\t\t\t */\n\t\t\tTEXT_MODE: number;\n\n\t\t\t/**\n\t\t\t * 手のひらツールを示す定数\n\t\t\t */\n\t\t\tHAND_TOOL_MODE: number;\n\n\t\t\t/**\n\t\t\t * スポイトツールを示す定数\n\t\t\t */\n\t\t\tEYEDROPPER_MODE: number;\n\n\t\t\t/**\n\t\t\t * 現在のモードを取得する。\n\t\t\t */\n\t\t\tgetMode(): number;\n\n\t\t\t/**\n\t\t\t * モード変更\n\t\t\t */\n\t\t\tchangeMode(mode: number): Promise<any>;\n\n\t\t\tisAliveMode(mode: Number): boolean;\n\t\t}\n\n\t\texport interface DrawEditorLayers {\n\n\t\t\t/**\n\t\t\t * レイヤー数\n\t\t\t */\n\t\t\tlayerCount(): Promise<number>;\n\n\t\t\t/**\n\t\t\t * レイヤー切り替え\n\t\t\t * @param index\n\t\t\t */\n\t\t\tsetCurrent(index: number): Promise<any>;\n\n\t\t\t/**\n\t\t\t * 現在レイヤー\n\t\t\t */\n\t\t\tgetCurrent(): Promise<number>;\n\n\t\t\t/**\n\t\t\t * 指定レイヤーの表示\n\t\t\t * @param index\n\t\t\t */\n\t\t\tshow(index: number): void;\n\n\t\t\t/**\n\t\t\t * 指定レイヤーの非表示\n\t\t\t * @param index\n\t\t\t */\n\t\t\thide(index: number): void;\n\n\t\t\t/**\n\t\t\t * レイヤー全非表示\n\t\t\t */\n\t\t\thideAll(): void;\n\n\t\t\t/**\n\t\t\t * レイヤーの全表示\n\t\t\t */\n\t\t\tshowAll(): void;\n\n\t\t\t/**\n\t\t\t * レイヤーの削除\n\t\t\t * @param index\n\t\t\t */\n\t\t\tremove(index: number): Promise<any>;\n\n\t\t\t/**\n\t\t\t *  レイヤーの追加\n\t\t\t */\n\t\t\taddLayer(): Promise<any>;\n\n\t\t\t/**\n\t\t\t * レイヤーの順序移動\n\t\t\t * @param index\n\t\t\t */\n\t\t\tmoveTo(index: number): Promise<any>;\n\t\t}\n\n\t\texport interface DrawEditorCanvas {\n\n\t\t\t/**\n\t\t\t * MouseDownもしくはTouchStartイベントを通知する。\n\t\t\t * Canvasの左上を0,0とした座標を設定する。\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\ttouchStart(x: number, y: number): void;\n\n\t\t\t/**\n\t\t\t * ドラッグもしくはTouchMoveイベントを通知する。\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\ttouchMove(x: number, y: number): void;\n\n\t\t\t/**\n\t\t\t * MouseUpもしくはTouchEndイベントを取得する。\n\t\t\t * Canvasの左上を0,0とした座標を設定する。\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\ttouchEnd(x: number, y: number): void;\n\n\t\t\t/**\n\t\t\t * テキストを設定する。\n\t\t\t * @param text\n\t\t\t */\n\t\t\tsetText(text: string): void;\n\n\t\t\t/**\n\t\t\t * 座標設定の履歴を元に戻す。\n\t\t\t */\n\t\t\tbackward(): void;\n\t\t}\n\n\t\texport interface UpdateListener {\n\t\t\t(): void;\n\t\t}\n\n\t\texport interface DrawEditor {\n\n\t\t\t/**\n\t\t\t * Canvasの幅\n\t\t\t */\n\t\t\tgetWidth(): number;\n\n\t\t\t/**\n\t\t\t * Canvasの高さ\n\t\t\t */\n\t\t\tgetHeight(): number;\n\n\t\t\t/**\n\t\t\t * Undo\n\t\t\t */\n\t\t\tundo(): Promise<any>;\n\n\t\t\t/**\n\t\t\t * Undoが可能かどうか\n\t\t\t */\n\t\t\tcanUndo(): boolean;\n\n\t\t\t/**\n\t\t\t * Redo\n\t\t\t */\n\t\t\tredo(): Promise<any>;\n\n\t\t\t/**\n\t\t\t * Redoが可能かどうか\n\t\t\t */\n\t\t\tcanRedo(): boolean;\n\n\t\t\t/**\n\t\t\t * 明示的に再描画する。\n\t\t\t */\n\t\t\treRender(): void;\n\n\t\t\t/**\n\t\t\t * イベント受付、描画を停止する\n\t\t\t */\n\t\t\tstop(): void;\n\n\t\t\t/**\n\t\t\t * イベント受付、描画を開始する。\n\t\t\t */\n\t\t\tstart(): void;\n\n\t\t\t/**\n\t\t\t * メインキャンバス\n\t\t\t */\n\t\t\tcanvas: DrawEditorCanvas;\n\n\t\t\t/**\n\t\t\t * 設定値\n\t\t\t */\n\t\t\tproperties: DrawEditorProperties;\n\n\t\t\t/**\n\t\t\t * レイヤー\n\t\t\t */\n\t\t\tlayers: DrawEditorLayers;\n\n\t\t\t/**\n\t\t\t * モードチェンジャー\n\t\t\t */\n\t\t\tmode: DrawEditorModeChanger;\n\n\t\t\t/**\n\t\t\t * 更新通ちを受け取るリスナーを削除する。\n\t\t\t * @param listener\n\t\t\t */\n\t\t\toff(listener: UpdateListener): void;\n\n\t\t\t/**\n\t\t\t * 更新通知を受け取るリスナーを設定する。\n\t\t\t * @param listener\n\t\t\t */\n\t\t\ton(listener: UpdateListener): void;\n\t\t}\n\t}\n\n\n\texport namespace history {\n\t\timport Message = structures.Message;\n\t\timport Layer = structures.Layer;\n\t\timport Transform = structures.Transform;\n\t\timport Clip = structures.Clip;\n\t\timport Draw = structures.Draw;\n\t\texport interface DrawHistory {\n\n\t\t\t/**\n\t\t\t * 履歴番号の一覧を取得する。\n\t\t\t */\n\t\t\tgetHistoryNumbers(): number[];\n\n\t\t\t/**\n\t\t\t * 現在の履歴番号を取得する。\n\t\t\t */\n\t\t\tgetNowHistoryNumber(): number;\n\n\t\t\t/**\n\t\t\t * 最終履歴番号を取得する。\n\t\t\t */\n\t\t\tgetLastHistoryNumber(): number;\n\n\t\t\t/**\n\t\t\t * 初回の履歴番号を取得する。存在しない場合は-1が返る。\n\t\t\t */\n\t\t\tgetFirstHistoryNumber(): number;\n\n\t\t\t/**\n\t\t\t * 指定された範囲の履歴を取得する。\n\t\t\t * @param from\n\t\t\t * @param to\n\t\t\t */\n\t\t\tgetMoments(from: number, to: number, ignoreLocal?: boolean): DrawMoment[];\n\n\t\t\t/**\n\t\t\t * 履歴を計算し、現在のDrawMessageを生成する。\n\t\t\t */\n\t\t\tgenerateMessage(ignoreLocal?: boolean): Message;\n\n\t\t\t/**\n\t\t\t * 指定されたhistoryNumber時点のレイヤーリストを取得する。\n\t\t\t * @param historyNumber\n\t\t\t */\n\t\t\tgetLayers(historyNumber?: number, ignoreLocal?: boolean): string[];\n\n\t\t\t/**\n\t\t\t * 更新イベントを待ち受けるリスナーを設定する。\n\t\t\t * 指定されたcallBackは一度のみ呼び出される。\n\t\t\t * 継続してイベントを受け取りたい場合は設定側で都度このメソッドを発行する必要がある。\n\t\t\t * @param callback\n\t\t\t */\n\t\t\tawaitUpdate(callback: (historyNumber: number) => void): void;\n\n\t\t\t/**\n\t\t\t * 有効な履歴かどうか\n\t\t\t * @param historyNumber\n\t\t\t */\n\t\t\tisAvailable(historyNumber?: number): boolean;\n\n\t\t\t/**\n\t\t\t * 編集セッションを開始する。\n\t\t\t * @param noWait 現在ロックしている編集セッションを強制的に解除するかどうか。\n\t\t\t */\n\t\t\tlock(noWait?: boolean): Promise<DrawHistoryEditSession>;\n\t\t}\n\n\t\texport interface NumberGenerator {\n\t\t\tgenerateNumber(): number;\n\t\t}\n\t\texport interface KeyGenerator {\n\t\t\tgenerateKey(): string;\n\t\t}\n\n\t\texport interface DrawHistoryEditSession {\n\n\t\t\t/**\n\t\t\t * セッションが有効かどうか\n\t\t\t */\n\t\t\tisAlive(): boolean;\n\n\t\t\t/**\n\t\t\t * 履歴番号を設定する。<br />\n\t\t\t * 現在の履歴番号に指定値の履歴番号が存在しない場合は指定値以下で最も大きい履歴番号が設定される。\n\t\t\t * 以降の更新メソッドが発生した際、指定値より大きい履歴が削除される。\n\t\t\t * @param historyNumber\n\t\t\t * @param clearFuture 指定されたhistoryNumberより先の履歴を削除するかどうか。デフォルト値はfalse\n\t\t\t */\n\t\t\tsetHistoryNumberNow(historyNumber: number, clearFuture?: boolean): number;\n\n\t\t\t/**\n\t\t\t * 履歴をクリアする。\n\t\t\t */\n\t\t\tclear(): void;\n\n\t\t\t/**\n\t\t\t * 新しいレイヤーを追加する。\n\t\t\t * @param layer\n\t\t\t * @param isLocal\n\t\t\t */\n\t\t\taddLayer(layer: Layer, isLocal?: boolean): DrawMoment;\n\n\t\t\t/**\n\t\t\t * 指定されたIDのレイヤーを削除する。\n\t\t\t * @param layerId\n\t\t\t */\n\t\t\tremoveLayer(layerId: string): void;\n\n\t\t\t/**\n\t\t\t * 編集履歴を積み上げる。\n\t\t\t * 結果はcommit時に反映する。\n\t\t\t */\n\t\t\taddMoment(): DrawMomentBuilder;\n\n\t\t\t/**\n\t\t\t * 編集セッションを解放する。\n\t\t\t */\n\t\t\trelease(): void;\n\t\t}\n\n\t\texport interface DrawMomentBuilder {\n\n\t\t\tputLayerMoment(key: string): DrawLayerMomentBuilder;\n\n\t\t\tsetSequence(sequence: string[]): DrawMomentBuilder;\n\n\t\t\tcommit(): DrawMoment;\n\t\t}\n\n\t\t/**\n\t\t * 履歴アイテム\n\t\t */\n\t\texport interface DrawMoment {\n\n\t\t\t/**\n\t\t\t * 履歴番号\n\t\t\t */\n\t\t\tgetHistoryNumber(): number;\n\n\t\t\t/**\n\t\t\t * CanvasId毎の変更マッピング。\n\t\t\t */\n\t\t\tgetKeys(): string[];\n\t\t\tgetLayerMoment(key: string): DrawLayerMoment;\n\n\t\t\t/**\n\t\t\t * Canvasの表示順　背面であるほど小さい添字。\n\t\t\t * 更新される毎に全件分設定され、ここにないCanvasは削除扱いとする。\n\t\t\t */\n\t\t\tgetSequence(): string[];\n\t\t}\n\n\t\texport interface DrawLayerMomentBuilder {\n\n\t\t\tsetTransForm(transform: Transform): DrawLayerMomentBuilder;\n\n\t\t\tsetClip(clip: Clip): DrawLayerMomentBuilder;\n\n\t\t\taddDraw(draw: Draw): DrawLayerMomentBuilder;\n\n\t\t\taddDraws(draw: Draw[]): DrawLayerMomentBuilder;\n\n\t\t\tcommit(): DrawMomentBuilder;\n\t\t}\n\n\t\t/**\n\t\t * Canvas毎の履歴アイテム\n\t\t */\n\t\texport interface DrawLayerMoment {\n\n\t\t\t/**\n\t\t\t * CanvasId\n\t\t\t */\n\t\t\tgetCanvasId(): string;\n\n\t\t\t/**\n\t\t\t * Canvas全体の変形成分。\n\t\t\t * 変更がある場合は毎回全体上書き。\n\t\t\t */\n\t\t\tgetTransform(): Transform;\n\n\t\t\t/**\n\t\t\t * Canvasの切り抜き。\n\t\t\t * 変更がある場合は毎回全体上書き。<br />\n\t\t\t * 切り抜きしたくない場合はpathの値がnullな空のClipを設定する。\n\t\t\t */\n\t\t\tgetClip(): Clip;\n\n\t\t\t/**\n\t\t\t * 書き込み履歴（追加分のみ）\n\t\t\t */\n\t\t\tgetDraws(): Draw[];\n\t\t}\n\t}\n\n\texport namespace renderer {\n\t\timport Draw = structures.Draw;\n\t\timport Clip = structures.Clip;\n\t\timport Transform = structures.Transform;\n\t\texport interface DrawchatRenderer {\n\n\t\t\twidth: number;\n\t\t\theight: number;\n\n\t\t\t/**\n\t\t\t * レイヤーの数を取得します。\n\t\t\t */\n\t\t\tsize(): number;\n\n\t\t\t/**\n\t\t\t * レイヤーの前面＞背面の順序を変更する。\n\t\t\t * @param order 元の添字を格納したリスト。リストの添字順にソートされる。\n\t\t\t */\n\t\t\tsortLayer(order: number[]): void;\n\n\t\t\t/**\n\t\t\t * 指定された添字のレイヤーを削除する。\n\t\t\t * @param index\n\t\t\t */\n\t\t\tremoveLayer(index: number): void;\n\n\t\t\t/**\n\t\t\t * レイヤーを新規に追加する。<br />\n\t\t\t * 追加したレイヤーの添字\n\t\t\t */\n\t\t\taddLayer(): number;\n\n\t\t\t/**\n\t\t\t * 指定された添字のレイヤーを一から描画する。\n\t\t\t * @param index 対象レイヤーの添字\n\t\t\t * @param draws 差分描画内容\n\t\t\t * @param transform 変形成分\n\t\t\t * @param clip くりぬきの指定\n\t\t\t */\n\t\t\trender(\n\t\t\t\tindex: number,\n\t\t\t\tdraws: Draw[],\n\t\t\t\ttransform?: Transform,\n\t\t\t\tclip?: Clip): void;\n\n\t\t\t/**\n\t\t\t * 指定された添字のレイヤーに対し、差分を描画する。\n\t\t\t * @param index 対象レイヤーの添字\n\t\t\t * @param draws 差分描画内容\n\t\t\t */\n\t\t\trenderDiff(\n\t\t\t\tindex: number,\n\t\t\t\tdraws: Draw[]\n\t\t\t): void;\n\n\t\t\t/**\n\t\t\t * 描画内容を全てクリアする。\n\t\t\t */\n\t\t\tclear(): void;\n\n\t\t\t/**\n\t\t\t * 画像をbase64化したデータを取得する。\n\t\t\t */\n\t\t\tcreateImageDataURI(): string;\n\n\t\t\t/**\n\t\t\t * 指定された添字のレイヤーを表示状態に設定する。\n\t\t\t * 引数が指定されていない場合は全件表示。\n\t\t\t * @param target\n\t\t\t */\n\t\t\tshow(target?: number[]): void;\n\n\t\t\t/**\n\t\t\t * 指定された添字のレイヤーを非表示状態に設定する。\n\t\t\t * 引数が指定されていない場合は全件非表示。\n\t\t\t * @param target\n\t\t\t */\n\t\t\thide(target?: number[]): void;\n\n\t\t\t/**\n\t\t\t * 指定されたピクセル座標の色成分を取得する。\n\t\t\t * r,g,b,aの配列を返す。\n\t\t\t */\n\t\t\tgetPixelColor(\n\t\t\t\tx: number,\n\t\t\t\ty: number,\n\t\t\t\tlayerIndex: number): number[];\n\t\t}\n\t}\n\texport namespace structures {\n\t\texport interface Messages {\n\t\t\tmessage: Message[];\n\t\t}\n\t\texport interface Message {\n\t\t\tid?: string;\n\t\t\tseq?: number;\n\t\t\tauthor?: string;\n\t\t\ttime?: number;\n\t\t\ttitle?: string;\n\t\t\tcanvas?: Layer[];\n\t\t}\n\t\texport interface Layer {\n\t\t\ttransform?: Transform;\n\t\t\tclip?: Clip;\n\t\t\tdraws: Draw[];\n\t\t}\n\t\texport interface Transform {\n\t\t\ta?: number;\n\t\t\tb?: number;\n\t\t\tc?: number;\n\t\t\td?: number;\n\t\t\tx?: number;\n\t\t\ty?: number;\n\t\t}\n\t\texport interface Clip {\n\t\t\ttransform?: Transform;\n\t\t\tpath: PathItem[];\n\t\t}\n\t\texport interface PathItem {\n\t\t\ttype: number;\n\t\t}\n\t\texport interface MoveTo extends PathItem {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t}\n\t\texport interface ArcTo extends PathItem {\n\t\t\tx1: number;\n\t\t\ty1: number;\n\t\t\tx2: number;\n\t\t\ty2: number;\n\t\t\tradius: number;\n\t\t}\n\t\texport interface LineTo extends PathItem {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t}\n\t\texport interface QuadraticCurveTo extends PathItem {\n\t\t\tcpx: number;\n\t\t\tcpy: number;\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t}\n\t\texport interface BezierCurveTo extends PathItem {\n\t\t\tcpx1: number;\n\t\t\tcpy1: number;\n\t\t\tcpx2: number;\n\t\t\tcpy2: number;\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t}\n\n\t\texport interface Draw {\n\t\t\ttransform?: Transform;\n\t\t\tcompositeOperation: number;\n\t\t}\n\t\texport interface GraphicsDraw extends Draw {\n\t\t\tgraphics: Graphic[];\n\t\t}\n\t\texport interface Graphic {\n\t\t\tfill?: Fill;\n\t\t\tstroke?: Stroke;\n\t\t\tpath: PathItem[];\n\t\t}\n\n\t\texport interface Fill {\n\t\t\tcolor?: string;\n\t\t\tlinerGradient?: LinerGradient;\n\t\t\tradialGradient?: RadialGradient;\n\t\t}\n\t\texport interface LinerGradient {\n\t\t\tx0: number;\n\t\t\ty0: number;\n\t\t\tx1: number;\n\t\t\ty1: number;\n\t\t\tcolorStops?: ColorStop[];\n\t\t}\n\t\texport interface ColorStop {\n\t\t\toffset: number;\n\t\t\tcolor: string;\n\t\t}\n\t\texport interface RadialGradient extends Fill {\n\t\t\tx0: number;\n\t\t\ty0: number;\n\t\t\tr0: number;\n\t\t\tx1: number;\n\t\t\ty1: number;\n\t\t\tr1: number;\n\t\t\tcolorStops?: ColorStop[];\n\t\t}\n\t\texport interface Stroke {\n\t\t\tfillStyle?: Fill;\n\t\t\tdash?: Dash;\n\t\t\tstyle?: StrokeStyle;\n\t\t}\n\t\texport interface Dash {\n\t\t\tsegments?: number[];\n\t\t\toffset?: number;\n\t\t}\n\t\texport interface StrokeStyle {\n\t\t\tthickness?: number;\n\t\t\tcaps?: number;\n\t\t\tjoints?: number;\n\t\t\tmiterLimit?: number;\n\t\t\tignoreScale?: number;\n\t\t}\n\t\texport interface TextDraw extends Draw {\n\t\t\ttext: Text;\n\t\t}\n\t\texport interface Text {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t\tfontFamily?: string;\n\t\t\tsize?: number;\n\t\t\tweight?: number;\n\t\t\tstyle?: number;\n\t\t\tfill?: Fill;\n\t\t\tstroke?: Stroke;\n\t\t\talign?: string;\n\t\t\tbaseline?: string;\n\t\t\ttext: string;\n\t\t}\n\t}\n\n\texport namespace updater {\n\t\timport Transform = structures.Transform;\n\t\timport ColorStop = structures.ColorStop;\n\t\texport interface DrawchatUpdater {\n\n\t\t\t/**\n\t\t\t * レイヤーを追加し、追加されたレイヤーのIDを取得する。\n\t\t\t */\n\t\t\taddLayer(): Promise<string>;\n\n\t\t\t/**\n\t\t\t * 指定されたレイヤーを削除する。\n\t\t\t * @param layerId\n\t\t\t */\n\t\t\tremoveLayer(layerId: string): Promise<any>;\n\n\t\t\t/**\n\t\t\t * レイヤーIDのリストを取得する。\n\t\t\t */\n\t\t\tgetLayers(): string[];\n\n\t\t\t/**\n\t\t\t * 変形トランザクションを開始する。\n\t\t\t * @param layerId\n\t\t\t * @param commit 直前の未コミットトランザクションが存在する場合、コミットするかキャンセルするかどうか。\n\t\t\t * デフォルト値はtrue\n\t\t\t */\n\t\t\tbeginTransform(layerId: string, commit?: boolean): Promise<TransformTransaction>;\n\n\t\t\t/**\n\t\t\t * 切り抜きトランザクションを開始する。\n\t\t\t * @param layerId\n\t\t\t * @param commit 直前の未コミットトランザクションが存在する場合、コミットするかキャンセルするかどうか。\n\t\t\t * デフォルト値はtrue\n\t\t\t */\n\t\t\tbeginClip(layerId: string, commit?: boolean): Promise<ClipTransaction>;\n\n\t\t\t/**\n\t\t\t * 描画トランザクションを開始する。\n\t\t\t * @param layerId\n\t\t\t * @param commit 直前の未コミットトランザクションが存在する場合、コミットするかキャンセルするかどうか。\n\t\t\t * デフォルト値はtrue\n\t\t\t */\n\t\t\tbeginPath(layerId: string, commit?: boolean): Promise<DrawPathTransaction>;\n\n\t\t\t/**\n\t\t\t * テキストトランザクションを開始する。\n\t\t\t * @param layerId\n\t\t\t * @param commit 直前の未コミットトランザクションが存在する場合、コミットするかキャンセルするかどうか。\n\t\t\t * デフォルト値はtrue\n\t\t\t */\n\t\t\tbeginText(layerId: string, commit?: boolean): Promise<TextTransaction>;\n\n\t\t\t/**\n\t\t\t * 表示順変更トランザクションを開始する。\n\t\t\t * @param commit 直前の未コミットトランザクションが存在する場合、コミットするかキャンセルするかどうか。\n\t\t\t * デフォルト値はtrue\n\t\t\t */\n\t\t\tbeginChangeSequence(commit?: boolean): Promise<ChangeSequenceTransaction>;\n\n\t\t\t/**\n\t\t\t * Undoが可能かどうかの判定\n\t\t\t */\n\t\t\tcanUndo(): boolean;\n\n\t\t\t/**\n\t\t\t * Redoが可能かどうかの判定\n\t\t\t */\n\t\t\tcanRedo(): boolean;\n\n\t\t\t/**\n\t\t\t * 一つ前の状態に戻す。\n\t\t\t */\n\t\t\tundo(): Promise<any>;\n\n\t\t\t/**\n\t\t\t * 戻した変更を進める。\n\t\t\t */\n\t\t\tredo(): Promise<any>;\n\t\t}\n\n\t\t/**\n\t\t * トランザクション\n\t\t */\n\t\texport interface DrawTransaction {\n\n\t\t\t/**\n\t\t\t * トランザクションが有効かどうか\n\t\t\t */\n\t\t\tisAlive(): boolean;\n\n\t\t\t/**\n\t\t\t * 変更内容をキャンセルする。\n\t\t\t */\n\t\t\tcancel(duration?: boolean): void;\n\n\t\t\t/**\n\t\t\t * 変更内容を確定する。\n\t\t\t */\n\t\t\tcommit(duration?: boolean): void;\n\n\t\t\t/**\n\t\t\t * 直前までの変更を履歴に反映する。\n\t\t\t */\n\t\t\tflush(): void;\n\n\t\t\t/**\n\t\t\t * savePointを設定する。\n\t\t\t */\n\t\t\tsetSavePoint(): void;\n\n\t\t\t/**\n\t\t\t * savePointに戻す。\n\t\t\t */\n\t\t\trestoreSavePoint(): void;\n\t\t}\n\n\t\t/**\n\t\t * 変形トランザクション\n\t\t */\n\t\texport interface TransformTransaction extends DrawTransaction {\n\n\t\t\t/**\n\t\t\t * 変形成分を設定\n\t\t\t * @param transform\n\t\t\t */\n\t\t\tsetMatrix(transform: Transform): TransformTransaction;\n\n\t\t\t/**\n\t\t\t * 変換マトリックスに並行移動を加えます。\n\t\t\t * @param tx\n\t\t\t * @param ty\n\t\t\t * @returns {Transform}\n\t\t\t */\n\t\t\ttranslate(tx: number, ty: number): TransformTransaction;\n\n\t\t\t/**\n\t\t\t * 変換マトリックスにX軸方向への変倍を加えます。\n\t\t\t * @param scaleX\n\t\t\t * @returns {Transform}\n\t\t\t */\n\t\t\tscaleX(scaleX: number): TransformTransaction;\n\n\t\t\t/**\n\t\t\t * 変換マトリックスにY軸方向への変倍を加えます。\n\t\t\t * @param scaleY\n\t\t\t * @returns {Transform}\n\t\t\t */\n\t\t\tscaleY(scaleY: number): TransformTransaction;\n\t\t\t/**\n\t\t\t * 変換マトリックスに変倍を加えます。\n\t\t\t * @param scaleX\n\t\t\t * @param scaleY\n\t\t\t * @returns {Transform}\n\t\t\t */\n\t\t\tscale(scaleX: number, scaleY: number): TransformTransaction;\n\n\t\t\t/**\n\t\t\t * 変換マトリックスに回転成分を加えます。\n\t\t\t * @param rad\n\t\t\t * @returns {Transform}\n\t\t\t */\n\t\t\trotate(transform: Transform, rad: number): TransformTransaction;\n\n\t\t\t/**\n\t\t\t * マトリックスにX軸方向へのゆがみ成分を加えます。\n\t\t\t * @param radX\n\t\t\t * @returns {Transform}\n\t\t\t */\n\t\t\tskewX(transform: Transform, radX: number): TransformTransaction;\n\n\t\t\t/**\n\t\t\t * マトリックスにY軸方向へのゆがみ成分を加えます。\n\t\t\t * @param radY\n\t\t\t * @returns {Transform}\n\t\t\t */\n\t\t\tskewY(transform: Transform, radY: number): TransformTransaction;\n\n\t\t\t/**\n\t\t\t * マトリックスにゆがみ成分を加えます。\n\t\t\t * @param radX\n\t\t\t * @param radY\n\t\t\t * @returns {Transform}\n\t\t\t */\n\t\t\tskew(radX: number, radY: number): TransformTransaction;\n\n\t\t\t/**\n\t\t\t * Matrixを結合します。\n\t\t\t * @param transform\n\t\t\t * @returns {Transform}\n\t\t\t */\n\t\t\tconcat(transform: Transform): TransformTransaction;\n\t\t}\n\n\t\t/**\n\t\t * 線描画トランザクション\n\t\t */\n\t\texport interface PathTransaction extends DrawTransaction {\n\n\t\t\t/**\n\t\t\t * 現在の起点を移動する。何もしなければ最初は0,0\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tmoveTo(\n\t\t\t\tx: number,\n\t\t\t\ty: number): PathTransaction;\n\n\t\t\t/**\n\t\t\t * 円弧を描画する。\n\t\t\t * @param x1\n\t\t\t * @param y1\n\t\t\t * @param x2\n\t\t\t * @param y2\n\t\t\t * @param radius\n\t\t\t */\n\t\t\tarcTo(\n\t\t\t\tx1: number,\n\t\t\t\ty1: number,\n\t\t\t\tx2: number,\n\t\t\t\ty2: number,\n\t\t\t\tradius: number): PathTransaction;\n\n\t\t\t/**\n\t\t\t * 直線を描画する。\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tlineTo(\n\t\t\t\tx: number,\n\t\t\t\ty: number): PathTransaction;\n\n\t\t\t/**\n\t\t\t * 2次ベジェ曲線を描画する。\n\t\t\t * @param cpx\n\t\t\t * @param cpy\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tquadraticCurveTo (\n\t\t\t\tcpx: number,\n\t\t\t\tcpy: number,\n\t\t\t\tx: number,\n\t\t\t\ty: number): PathTransaction;\n\n\t\t\t/**\n\t\t\t * 3次ベジェ曲線を描画する。\n\t\t\t * @param cpx1\n\t\t\t * @param cpy1\n\t\t\t * @param cpx2\n\t\t\t * @param cpy2\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tbezierCurveTo (\n\t\t\t\tcpx1: number,\n\t\t\t\tcpy1: number,\n\t\t\t\tcpx2: number,\n\t\t\t\tcpy2: number,\n\t\t\t\tx: number,\n\t\t\t\ty: number): PathTransaction;\n\t\t}\n\n\t\t/**\n\t\t * 線描画トランザクション\n\t\t */\n\t\texport interface ClipTransaction extends PathTransaction {\n\n\t\t\t/**\n\t\t\t * 現在の起点を移動する。何もしなければ最初は0,0\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tmoveTo(\n\t\t\t\tx: number,\n\t\t\t\ty: number): ClipTransaction;\n\n\t\t\t/**\n\t\t\t * 円弧を描画する。\n\t\t\t * @param x1\n\t\t\t * @param y1\n\t\t\t * @param x2\n\t\t\t * @param y2\n\t\t\t * @param radius\n\t\t\t */\n\t\t\tarcTo(\n\t\t\t\tx1: number,\n\t\t\t\ty1: number,\n\t\t\t\tx2: number,\n\t\t\t\ty2: number,\n\t\t\t\tradius: number): ClipTransaction;\n\n\t\t\t/**\n\t\t\t * 直線を描画する。\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tlineTo(\n\t\t\t\tx: number,\n\t\t\t\ty: number): ClipTransaction;\n\n\t\t\t/**\n\t\t\t * 2次ベジェ曲線を描画する。\n\t\t\t * @param cpx\n\t\t\t * @param cpy\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tquadraticCurveTo (\n\t\t\t\tcpx: number,\n\t\t\t\tcpy: number,\n\t\t\t\tx: number,\n\t\t\t\ty: number): ClipTransaction;\n\n\t\t\t/**\n\t\t\t * 3次ベジェ曲線を描画する。\n\t\t\t * @param cpx1\n\t\t\t * @param cpy1\n\t\t\t * @param cpx2\n\t\t\t * @param cpy2\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tbezierCurveTo (\n\t\t\t\tcpx1: number,\n\t\t\t\tcpy1: number,\n\t\t\t\tcpx2: number,\n\t\t\t\tcpy2: number,\n\t\t\t\tx: number,\n\t\t\t\ty: number): ClipTransaction;\n\n\t\t\t/**\n\t\t\t * 直前までの変更を履歴に反映する。\n\t\t\t */\n\t\t\tflush(): void;\n\n\t\t}\n\n\t\t/**\n\t\t * 線描画トランザクション\n\t\t */\n\t\texport interface DrawPathTransaction extends PathTransaction {\n\t\t\t/**\n\t\t\t * 既存の描画内容との合成方法を指定する。\n\t\t\t * 0:source-over 両方のイメージの領域が描画される。重なった部分は新規イメージとなる。（初期値）<br />\n\t\t\t * 1:source-atop 現在イメージの領域のみが描画される。重なった部分は新規イメージとなる。<br />\n\t\t\t * 2:source-in 重なった領域のみが描画される。重なった部分は新規イメージとなる。<br />\n\t\t\t * 3:source-out 新規イメージの領域のみが描画される。重なった部分は描画されない。<br />\n\t\t\t * 4:destination-atop 新規イメージの領域のみが描画される。重なった部分は現在イメージとなる。<br />\n\t\t\t * 5:destination-in 重なった領域のみが描画される。重なった部分は現在イメージとなる。<br />\n\t\t\t * 6:destination-out 現在イメージの領域のみが描画される。重なった部分は描画されない。<br />\n\t\t\t * 7:destination-over 両方のイメージの領域が描画される。重なった部分は現在イメージとなる。<br />\n\t\t\t * 8:lighter 両方のイメージの領域が描画される。重なった部分は混色して描画される。<br />\n\t\t\t * 9:copy 新規イメージの領域のみが描画される。重なった部分は新規イメージとなる。<br />\n\t\t\t * 10:xor 両方のイメージの領域が描画される。重なった部分は描画されない。<br />\n\t\t\t * @param compositeOperation\n\t\t\t */\n\t\t\tsetCompositeOperation(compositeOperation: number): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 塗りの色を設定する。\n\t\t\t * 線形・円形グラデーション・ベタ塗りは混在は混在しない。\n\t\t\t * @param color\n\t\t\t */\n\t\t\tsetFill(color: string): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 線形グラデーションを設定する。\n\t\t\t * 線形・円形グラデーション・ベタ塗りは混在は混在しない。\n\t\t\t * @param x0\n\t\t\t * @param y0\n\t\t\t * @param x1\n\t\t\t * @param y1\n\t\t\t * @param colorStops\n\t\t\t */\n\t\t\tsetFillLinerGradient(\n\t\t\t\tx0: number,\n\t\t\t\ty0: number,\n\t\t\t\tx1: number,\n\t\t\t\ty1: number,\n\t\t\t\tcolorStops?: ColorStop[]): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 円形グラデーションを設定する。\n\t\t\t * 線形・円形グラデーション・ベタ塗りは混在は混在しない。\n\t\t\t * @param x0\n\t\t\t * @param y0\n\t\t\t * @param r0\n\t\t\t * @param x1\n\t\t\t * @param y1\n\t\t\t * @param r1\n\t\t\t * @param colorStops\n\t\t\t */\n\t\t\tsetFillRadialGradient(\n\t\t\t\tx0: number,\n\t\t\t\ty0: number,\n\t\t\t\tr0: number,\n\t\t\t\tx1: number,\n\t\t\t\ty1: number,\n\t\t\t\tr1: number,\n\t\t\t\tcolorStops?: ColorStop[]): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 線の色を設定する。\n\t\t\t * @param color\n\t\t\t */\n\t\t\tsetStrokeColor(color: string): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 破線を設定。引数がいずれもnullの場合は破線なし。\n\t\t\t * @param segments\n\t\t\t * @param offset\n\t\t\t */\n\t\t\tsetStrokeDash(\n\t\t\t\tsegments?: number[],\n\t\t\t\toffset?: number): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 線スタイルを設定。\n\t\t\t * @param thickness 太さ\n\t\t\t * @param caps 線端の形\n\t\t\t * @param joints 接点の形\n\t\t\t * @param miterLimit\n\t\t\t * @param ignoreScale\n\t\t\t */\n\t\t\tsetStrokeStyle(\n\t\t\t\tthickness?: number,\n\t\t\t\tcaps?: number,\n\t\t\t\tjoints?: number,\n\t\t\t\tmiterLimit?: number,\n\t\t\t\tignoreScale?: number): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 現在の起点を移動する。何もしなければ最初は0,0\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tmoveTo(\n\t\t\t\tx: number,\n\t\t\t\ty: number): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 円弧を描画する。\n\t\t\t * @param x1\n\t\t\t * @param y1\n\t\t\t * @param x2\n\t\t\t * @param y2\n\t\t\t * @param radius\n\t\t\t */\n\t\t\tarcTo(\n\t\t\t\tx1: number,\n\t\t\t\ty1: number,\n\t\t\t\tx2: number,\n\t\t\t\ty2: number,\n\t\t\t\tradius: number): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 直線を描画する。\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tlineTo(\n\t\t\t\tx: number,\n\t\t\t\ty: number): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 2次ベジェ曲線を描画する。\n\t\t\t * @param cpx\n\t\t\t * @param cpy\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tquadraticCurveTo (\n\t\t\t\tcpx: number,\n\t\t\t\tcpy: number,\n\t\t\t\tx: number,\n\t\t\t\ty: number): DrawPathTransaction;\n\n\t\t\t/**\n\t\t\t * 3次ベジェ曲線を描画する。\n\t\t\t * @param cpx1\n\t\t\t * @param cpy1\n\t\t\t * @param cpx2\n\t\t\t * @param cpy2\n\t\t\t * @param x\n\t\t\t * @param y\n\t\t\t */\n\t\t\tbezierCurveTo (\n\t\t\t\tcpx1: number,\n\t\t\t\tcpy1: number,\n\t\t\t\tcpx2: number,\n\t\t\t\tcpy2: number,\n\t\t\t\tx: number,\n\t\t\t\ty: number): DrawPathTransaction;\n\t\t}\n\n\t\t/**\n\t\t * 全面、背面入れ替えのトランザクション\n\t\t */\n\t\texport interface ChangeSequenceTransaction extends DrawTransaction {\n\n\t\t\t/**\n\t\t\t * 指定されたレイヤーを最前面へ移動する。\n\t\t\t * @param layerId\n\t\t\t */\n\t\t\ttoFirst(layerId: string): ChangeSequenceTransaction;\n\n\t\t\t/**\n\t\t\t * 指定されたレイヤーを前面へ移動する。\n\t\t\t * @param layerId\n\t\t\t */\n\t\t\ttoPrev(layerId: string): ChangeSequenceTransaction;\n\t\t\t/**\n\t\t\t * 指定されたレイヤーを背面へ移動する。\n\t\t\t * @param layerId\n\t\t\t */\n\t\t\ttoBack(layerId: string): ChangeSequenceTransaction;\n\t\t\t/**\n\t\t\t * 指定されたレイヤーを最背面へ移動する。\n\t\t\t * @param layerId\n\t\t\t */\n\t\t\ttoLast(layerId: string): ChangeSequenceTransaction;\n\t\t\t/**\n\t\t\t * レイヤーの順序を移動する。\n\t\t\t * @param layerId\n\t\t\t * @param index\n\t\t\t */\n\t\t\ttoMove(layerId: string, index: number): ChangeSequenceTransaction;\n\t\t}\n\n\t\t/**\n\t\t * テキスト編集トランザクション\n\t\t */\n\t\texport interface TextTransaction extends DrawTransaction {\n\n\t\t\t/**\n\t\t\t * 既存の描画内容との合成方法を指定する。\n\t\t\t * 0:source-over 両方のイメージの領域が描画される。重なった部分は新規イメージとなる。（初期値）<br />\n\t\t\t * 1:source-atop 現在イメージの領域のみが描画される。重なった部分は新規イメージとなる。<br />\n\t\t\t * 2:source-in 重なった領域のみが描画される。重なった部分は新規イメージとなる。<br />\n\t\t\t * 3:source-out 新規イメージの領域のみが描画される。重なった部分は描画されない。<br />\n\t\t\t * 4:destination-atop 新規イメージの領域のみが描画される。重なった部分は現在イメージとなる。<br />\n\t\t\t * 5:destination-in 重なった領域のみが描画される。重なった部分は現在イメージとなる。<br />\n\t\t\t * 6:destination-out 現在イメージの領域のみが描画される。重なった部分は描画されない。<br />\n\t\t\t * 7:destination-over 両方のイメージの領域が描画される。重なった部分は現在イメージとなる。<br />\n\t\t\t * 8:lighter 両方のイメージの領域が描画される。重なった部分は混色して描画される。<br />\n\t\t\t * 9:copy 新規イメージの領域のみが描画される。重なった部分は新規イメージとなる。<br />\n\t\t\t * 10:xor 両方のイメージの領域が描画される。重なった部分は描画されない。<br />\n\t\t\t * @param compositeOperation\n\t\t\t */\n\t\t\tsetCompositeOperation(compositeOperation: number): TextTransaction;\n\n\t\t\tsetPosition(x: number, y: number): TextTransaction;\n\n\t\t\t/**\n\t\t\t * テキストの塗りを設定する。\n\t\t\t * 線形・円形グラデーション・ベタ塗りは混在は混在しない。\n\t\t\t * @param color\n\t\t\t */\n\t\t\tsetFill(color: string): TextTransaction;\n\t\t\t/**\n\t\t\t * テキストの線形グラデーションを設定する。\n\t\t\t * 線形・円形グラデーション・ベタ塗りは混在は混在しない。\n\t\t\t * @param x0\n\t\t\t * @param y0\n\t\t\t * @param x1\n\t\t\t * @param y1\n\t\t\t * @param colorStops\n\t\t\t */\n\t\t\tsetFillLinerGradient(\n\t\t\t\tx0: number,\n\t\t\t\ty0: number,\n\t\t\t\tx1: number,\n\t\t\t\ty1: number,\n\t\t\t\tcolorStops?: ColorStop[]): TextTransaction;\n\t\t\t/**\n\t\t\t * テキストの円形グラデーションを設定する。\n\t\t\t * 線形・円形グラデーション・ベタ塗りは混在は混在しない。\n\t\t\t * @param x0\n\t\t\t * @param y0\n\t\t\t * @param r0\n\t\t\t * @param x1\n\t\t\t * @param y1\n\t\t\t * @param r1\n\t\t\t * @param colorStops\n\t\t\t */\n\t\t\tsetFillRadialGradient(\n\t\t\t\tx0: number,\n\t\t\t\ty0: number,\n\t\t\t\tr0: number,\n\t\t\t\tx1: number,\n\t\t\t\ty1: number,\n\t\t\t\tr1: number,\n\t\t\t\tcolorStops?: ColorStop[]): TextTransaction;\n\t\t\t/**\n\t\t\t * 線の色を設定する。\n\t\t\t * @param color\n\t\t\t */\n\t\t\tsetStrokeColor(color: string): TextTransaction;\n\t\t\t/**\n\t\t\t * テキストを追加する。\n\t\t\t * @param text\n\t\t\t */\n\t\t\tpush(text: string): TextTransaction;\n\t\t\t/**\n\t\t\t * baselineを設定する。何も設定しなければ通常のベースライン。\n\t\t\t * @param baseline\n\t\t\t */\n\t\t\tsetBaseline(baseline?: string): TextTransaction;\n\t\t\t/**\n\t\t\t * テキストの揃えを設定する。\n\t\t\t * @param align\n\t\t\t */\n\t\t\tsetAlign(align?: string): TextTransaction;\n\n\t\t\t/**\n\t\t\t * フォントファミリーを設定する。\n\t\t\t * @param fontFamily\n\t\t\t */\n\t\t\tsetFontFamily(fontFamily: string): TextTransaction;\n\n\t\t\t/**\n\t\t\t * フォントサイズを設定する。\n\t\t\t * @param size\n\t\t\t */\n\t\t\tsetSize(size: number): TextTransaction;\n\n\t\t\t/**\n\t\t\t * フォント太さを設定する。\n\t\t\t * @param weight\n\t\t\t */\n\t\t\tsetWeight(weight: number): TextTransaction;\n\n\t\t\t/**\n\t\t\t * フォントスタイルを設定する。\n\t\t\t * @param style\n\t\t\t */\n\t\t\tsetStyle(style: number): TextTransaction;\n\t\t}\n\t}\n\texport namespace viewer {\n\t\timport DrawchatRenderer = renderer.DrawchatRenderer;\n\t\timport DrawHistory = history.DrawHistory;\n\t\timport Layer = structures.Layer;\n\t\t/**\n\t\t * 編集内容と描画をリアルタイムで結びつけるクラス。\n\t\t */\n\t\texport interface DrawchatViewer {\n\n\t\t\t/**\n\t\t\t * 描画内容を全てクリアする。\n\t\t\t */\n\t\t\tclear(): void;\n\n\t\t\t/**\n\t\t\t * 画像をbase64化したデータを取得する。\n\t\t\t */\n\t\t\tcreateImageDataURI(): string;\n\n\t\t\t/**\n\t\t\t * 指定された添字のレイヤーを表示状態に設定する。\n\t\t\t * 引数が指定されていない場合は全件表示。\n\t\t\t * @param target\n\t\t\t */\n\t\t\tshow(target?: number[]): void;\n\n\t\t\t/**\n\t\t\t * 指定された添字のレイヤーを非表示状態に設定する。\n\t\t\t * 引数が指定されていない場合は全件非表示。\n\t\t\t * @param target\n\t\t\t */\n\t\t\thide(target?: number[]): void;\n\n\t\t\t/**\n\t\t\t * 指定されたピクセル座標の色成分を取得する。\n\t\t\t * r,g,b,aの配列を返す。\n\t\t\t */\n\t\t\tgetPixelColor(x: number, y: number, layerIndex: number): number[];\n\n\t\t\t/**\n\t\t\t * DrawchatHistoryとの同期を開始する。\n\t\t\t */\n\t\t\tstart(): void;\n\n\t\t\t/**\n\t\t\t * DrawchatHistoryとの同期を停止する。\n\t\t\t */\n\t\t\tstop(): void;\n\n\t\t\t/**\n\t\t\t * 描画内容を1から再レンダリングする。\n\t\t\t */\n\t\t\trefresh(): void;\n\t\t}\n\n\t\texport interface DrawchatViewerFactory {\n\t\t\tcreateInstance(\n\t\t\t\trenderer: DrawchatRenderer,\n\t\t\t\tcore?: DrawHistory): DrawchatViewer;\n\t\t}\n\n\t\texport interface NamedLayer extends Layer {\n\t\t\tlayerId: string;\n\t\t}\n\n\t\texport interface LayerMap {\n\t\t\t[key: string]: NamedLayer;\n\t\t}\n\t}\n}\nexport default APIS;"]}